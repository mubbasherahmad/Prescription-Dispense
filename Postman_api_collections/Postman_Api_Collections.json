{
	"info": {
		"_postman_id": "e2e48c6d-0471-455a-b5b6-16eff07ca368",
		"name": "Prescription_mangement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31899772",
		"_collection_link": "https://personal-1360.postman.co/workspace/Prescrition_APIs~ccb02739-6e0d-4ddb-ad42-82fc8d533376/collection/31899772-e2e48c6d-0471-455a-b5b6-16eff07ca368?action=share&source=collection_link&creator=31899772"
	},
	"item": [
		{
			"name": "Health check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields: message, database, and timestamp\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('message', 'database', 'timestamp');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Timestamp is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timestamp).to.exist;\r",
							"    pm.expect(new Date(responseData.timestamp).getTime()).to.not.be.NaN;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/health",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The id must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"canManageInventory should be a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.canManageInventory).to.be.a('boolean');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"John Doee\",\r\n  \"email\": \"johndoee@example.com\",\r\n  \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.exist.and.to.match(/^[A-Za-z0-9\\-._~%]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('string');\r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"    pm.expect(responseData.role).to.be.a('string');\r",
							"    pm.expect(responseData.canManageInventory).to.be.a('boolean');\r",
							"    pm.expect(responseData.token).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Admin User\",\r\n  \"email\": \"admin@example.com\",\r\n  \"password\": \"123456\",\r\n  \"role\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Role must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.role).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CanManageInventory should be a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.canManageInventory).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"john@example.com\",\r\n  \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get profile protected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains a message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Attribute</th>\r",
							"        <th>Value</th>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>id</td>\r",
							"        <td>{{response.id}}</td>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>name</td>\r",
							"        <td>{{response.name}}</td>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>role</td>\r",
							"        <td>{{response.role}}</td>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>canManageInventory</td>\r",
							"        <td>{{response.canManageInventory}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return { response: pm.response.json() };\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlMDY0YjViYzg5Mzc5NTliNzYyNSIsImlhdCI6MTc1OTQzNjkwMCwiZXhwIjoxNzYyMDI4OTAwfQ.VyCvPYx7wV-1WIBEo8GNLGjjlHaay-lj1y61nyIOAvg",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update profile Protected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"canManageInventory should be a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('canManageInventory').that.is.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that 'id', 'name', and 'role' are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'role', 'canManageInventory', 'token');\r",
							"    \r",
							"    [responseData.id, responseData.name, responseData.role].forEach(function(value) {\r",
							"        pm.expect(value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlMDY0YjViYzg5Mzc5NTliNzYyNSIsImlhdCI6MTc1OTQzNjkwMCwiZXhwIjoxNzYyMDI4OTAwfQ.VyCvPYx7wV-1WIBEo8GNLGjjlHaay-lj1y61nyIOAvg",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"John Updated\",\r\n  \"email\": \"johnupdated@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/auth/profile",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "create prescription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('user', 'patientName', 'patientAge', 'medications', 'notes', 'status', 'allMedicationsAvailable', '_id', 'expiryDate', 'createdAt', 'updatedAt', '__v');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Medications array contains objects with required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('medications').that.is.an('array').with.length.greaterThan(0);\r",
							"    \r",
							"    responseData.medications.forEach(medication => {\r",
							"        pm.expect(medication).to.have.all.keys('name', 'dosage', 'frequency', 'duration', 'stockChecked', 'stockAvailable', 'requiredQuantity', 'availableStock');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Patient age is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.patientAge).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Patient age should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVkY2E4YjViYzg5Mzc5NTliNzYxZiIsImlhdCI6MTc1OTQzNzExMywiZXhwIjoxNzYyMDI5MTEzfQ.dCOBEAy_V6fcThSPeb2d1Hhu-bB7YRPswHPAYLWVGBQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"patientName\": \"Alice Smith\",\r\n  \"patientAge\": 30,\r\n  \"medications\": [\r\n    {\r\n      \"name\": \"Paracetamol\",\r\n      \"dosage\": \"500mg\",\r\n      \"frequency\": \"2 times/day\",\r\n      \"duration\": \"5 days\"\r\n    },\r\n    {\r\n      \"name\": \"Amoxicillin\",\r\n      \"dosage\": \"250mg\",\r\n      \"frequency\": \"3 times/day\",\r\n      \"duration\": \"7 days\"\r\n    }\r\n  ],\r\n  \"notes\": \"Take medicines after meals\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/prescriptions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"prescriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update prescription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('_id', 'user', 'patientName', 'patientAge', 'medications', 'notes', 'status', 'allMedicationsAvailable', 'expiryDate', 'createdAt', 'updatedAt', '__v');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Medications array contains objects with required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.medications).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.medications.forEach(function(medication) {\r",
							"        pm.expect(medication).to.have.all.keys('name', 'dosage', 'frequency', 'duration', 'stockChecked', 'stockAvailable', 'requiredQuantity', 'availableStock');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that patientAge is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.patientAge).to.be.a('number').and.to.be.at.least(0, \"patientAge should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVkY2E4YjViYzg5Mzc5NTliNzYxZiIsImlhdCI6MTc1OTQzNzExMywiZXhwIjoxNzYyMDI5MTEzfQ.dCOBEAy_V6fcThSPeb2d1Hhu-bB7YRPswHPAYLWVGBQ",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"medications\": [\r\n    {\r\n      \"name\": \"Paracetamol\",\r\n      \"dosage\": \"500mg\",\r\n      \"frequency\": \"2 times/day\",\r\n      \"duration\": \"5 days\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/prescriptions/68dee552b5bc8937959b7631",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"prescriptions",
						"68dee552b5bc8937959b7631"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete prescription",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlMDY0YjViYzg5Mzc5NTliNzYyNSIsImlhdCI6MTc1OTQzNjkwMCwiZXhwIjoxNzYyMDI4OTAwfQ.VyCvPYx7wV-1WIBEo8GNLGjjlHaay-lj1y61nyIOAvg",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/prescriptions/68dee552b5bc8937959b7631",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"prescriptions",
						"68dee552b5bc8937959b7631"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all Drug",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema is valid and is an array of drug objects\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(drug) {\r",
							"        pm.expect(drug).to.be.an('object');\r",
							"        // You can add checks for properties of drug objects here if needed\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlMDY0YjViYzg5Mzc5NTliNzYyNSIsImlhdCI6MTc1OTQzNjkwMCwiZXhwIjoxNzYyMDI4OTAwfQ.VyCvPYx7wV-1WIBEo8GNLGjjlHaay-lj1y61nyIOAvg",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/drugs",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"drugs"
					]
				}
			},
			"response": []
		},
		{
			"name": "create drug",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlOTdmYjViYzg5Mzc5NTliNzY0MyIsImlhdCI6MTc1OTQzOTIzMiwiZXhwIjoxNzYyMDMxMjMyfQ.9MXL8ethzUZIDdfZSh5v2kW8AgphAc3Lo0uyhR8Mr_A",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"medicineName\": \"Paracetamol\",\r\n  \"medicineId\": \"PARA500\",\r\n  \"groupName\": \"Analgesic\",\r\n  \"stock\": 100,\r\n  \"expiryDate\": \"2025-12-31\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/drugs",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"drugs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update drug",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('_id', 'medicineName', 'medicineId', 'groupName', 'stock', 'createdBy', 'createdAt', 'updatedAt', '__v');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Stock must be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.stock).to.be.a('number').and.to.be.at.least(0, \"Stock should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt is not in a valid date format\");\r",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt is not in a valid date format\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlOTdmYjViYzg5Mzc5NTliNzY0MyIsImlhdCI6MTc1OTQzOTIzMiwiZXhwIjoxNzYyMDMxMjMyfQ.9MXL8ethzUZIDdfZSh5v2kW8AgphAc3Lo0uyhR8Mr_A",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"stock\": 90\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5001/api/drugs/68deea41b5bc8937959b7647",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"drugs",
						"68deea41b5bc8937959b7647"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete drug",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGVlOTdmYjViYzg5Mzc5NTliNzY0MyIsImlhdCI6MTc1OTQzOTIzMiwiZXhwIjoxNzYyMDMxMjMyfQ.9MXL8ethzUZIDdfZSh5v2kW8AgphAc3Lo0uyhR8Mr_A",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5001/api/drugs/68deea41b5bc8937959b7647",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"drugs",
						"68deea41b5bc8937959b7647"
					]
				}
			},
			"response": []
		}
	]
}